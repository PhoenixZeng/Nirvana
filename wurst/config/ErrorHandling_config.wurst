package ErrorHandling_config
import NoWurst
import public Printing
import public Real
import public Integer
import public String
import GameTimer
import MagicFunctions
import Hashtable
import ErrorHandling


constant MUTE_ERROR_DURATION = 30
constant PRIMARY_ERROR_KEY = -1
constant HT = InitHashtable()

/**
	Stores the last error thrown by error().
	This error can be inspected when using try() from package Execute.
**/
public var lastError = ""

/*
Allows you to suppress error output.
This is primarily useful when you catch
an error with try().
*/
init
	suppressErrorMessages = true

@config public function error(string msg)
	if compiletime
		compileError("[错误]: " + msg)
	else
		if not suppressErrorMessages
			let hash = msg.getHash()
			if HT.hasInt(PRIMARY_ERROR_KEY, hash)
				// Error has been printed before
				if HT.loadInt(PRIMARY_ERROR_KEY, hash) + MUTE_ERROR_DURATION < currentTime
					// Time to print the error again
					Log.error(msg + getStackTraceString())
					HT.saveInt(PRIMARY_ERROR_KEY, hash, currentTime.toInt())
					HT.saveBoolean(PRIMARY_ERROR_KEY, hash, false)
				else if HT.hasBoolean(PRIMARY_ERROR_KEY, hash)
					if not HT.loadBoolean(PRIMARY_ERROR_KEY, hash)
						Log.error("|cffFF3A29重复的错误被隐藏|r")
						HT.saveBoolean(PRIMARY_ERROR_KEY, hash, true)	
				else
					Log.error("|cffFF3A29重复的错误被隐藏|r")
					HT.saveBoolean(PRIMARY_ERROR_KEY, hash, true)	
			else
				HT.saveInt(PRIMARY_ERROR_KEY, hash, currentTime.toInt())
				Log.error("|cffFF3A29[错误]:|r " + msg + getStackTraceString())
		lastError = msg
		// print(1/0)