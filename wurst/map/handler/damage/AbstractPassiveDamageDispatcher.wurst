package AbstractPassiveDamageDispatcher
import DamageDispatcher
import DmgType
import CenterTimer
import baseImport
import HashList
// import YDEventDamage

group hurtGroup = CreateGroup()

public int condProbOffSet = 0

public tuple AbilCond(
    int    abilId,
    real   prob)//0-100概率
public tuple TechCond(
    int    id,
    real   lv)//0-100概率

public enum DamageTarget
    Single
    Range
public abstract class AbstractPassiveDamageDispatcher extends DamageDispatcher
    string        name     = ""
    AbilCond      abilCond = AbilCond(0, 0)
    TechCond      techCond = TechCond(0, 0)
    real          hurt     = 0
    real          lvOffset = 0
    UnitDamageType   type_ = Null
    DamageTarget  target_  = DamageTarget.Single
    Prop          prop      = Prop.ALL
    real          range    = 300
    string        effPath
    string        targetEffPath
    string        refPoint = "chest"
    construct()
    construct(string name)
        this.name = name
        
    static function cleanById(int id)
        let list = new HashList<AbstractPassiveDamageDispatcher>()
        for i in DamageDispatcher
            if i instanceof AbstractPassiveDamageDispatcher
                let is =  i castTo AbstractPassiveDamageDispatcher
                if is.abilCond.abilId == id
                    list.add(is)
        for i in list
            destroy i
        destroy list

    static function on(string name,AbstractPassiveDamageDispatcher t) returns AbstractPassiveDamageDispatcher
        t.name = name
        return t
    function setHurt(real hurtMul,real lvOffset)
        this.hurt = hurtMul
        this.lvOffset = lvOffset
    function setHurtRange(real range)
        this.range = range
        target_ = DamageTarget.Range
    function setAbilCond(int abilId,real prob)
        this.abilCond = AbilCond(abilId, prob)
    function setAbilCond(int abilId)
        this.abilCond = AbilCond(abilId, 100)
    function setTechCond(int abilId,real prob)
        this.techCond = TechCond(abilId, prob)
    function setTechCond(int abilId)
        this.techCond = TechCond(abilId, 1)
    function setType(UnitDamageType t)
        this.type_ = t
    function setEffect(string path)
        this.effPath = path
    function setTargetEffect(string path,string refPoint)
        this.refPoint = refPoint
        this.targetEffPath = path
    function setProp(Prop p)
        this.prop = p
    override function toString() returns string
        return "AbstractPassiveDamageDispatcher$"+(this castTo int)

    abstract function doIt(AbstractPassiveDamageDispatcher d,DmgWrapper dmg)

    override function do(DmgWrapper dmg)
        //只对普攻生效
        if dmg.t != DmgType.ATTACK
            return
        var flag = true
        int lv
        if abilCond.abilId != 0
            lv = GetUnitAbilityLevel(dmg.i, abilCond.abilId)
            flag = flag and lv > 0 and  GetRandomReal(0, 100) <= abilCond.prob + condProbOffSet
        if techCond.id != 0
            flag = flag and GetPlayerTechCountSimple(techCond.id,dmg.i.getOwner()) >= techCond.lv
        if not flag
            return
        doIt(this, dmg)


    function getDamageDual(unit origin,int lv,real _damage) returns real
        let u = origin.getMainHero()
        var val = u.getPropVal(prop)
        return val * (1+this.lvOffset).pow(lv.toReal() - 1)

        
    function typeAttack(unit u,real k ,unit target,int lv)
        flagDispatcherInner = false
        switch type_
            case Attack
                // Log.debug("case attack" + dh.hurt.getDual(lv, k))
                u.damageAttack(target, getDamageDual(u,lv, k))
            case AttackNoDef
                // Log.debug("case attackNoDef"+ dh.hurt.getDual(lv, k))
                u.damageAttackNoDef(target, getDamageDual(u,lv, k))
            case Spell
                // Log.debug("case spell"+ dh.hurt.getDual(lv, k))
                u.damageSpell(target, getDamageDual(u,lv, k))
            case Real
                // Log.debug("case real"+ dh.hurt.getDual(lv, k))
                u.damageCode(target, getDamageDual(u,lv, k))
            case Percent
                // Log.debug("case percent"+ dh.hurt.getDual(lv, k * target.getMaxHP()))
                u.damageCode(target, getDamageDual(u,lv, k * target.getMaxHP()))
            case Null
                // Log.debug("case null")
                u.damageAttack(target, 0)
        flagDispatcherInner = true
