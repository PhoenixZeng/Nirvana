package UnitWindWalk
import UnitLimit
import YDJapiOther

public class UnitWindWalk
    use UnitLimit
    static let name = "神行"
    static int foot = EX_MoveType.FOOT
    static int windwalk = EX_MoveType.WINDWALK
    static function apply(unit u,real time) returns thistype
        let c = get(u)
        if c == null
            let a = getThis()
            a.target = u
            a.time = time
            a.onApply(u, time)
            return a
        else
            c.onCover(u,time)
            return c
    override static function get(unit u) returns thistype
        thistype pre = null
        for i in UnitWindWalk
            if i.target == u
                pre = i
        return pre

    override function getName() returns string
        return name

    override static function getThis() returns thistype
        return new UnitWindWalk()
            
    override function onApply(unit u,real time)
        target.exMoveType(windwalk)
    override static function removal(unit u)
        for i in UnitWindWalk
            if i.target == u
                i.onRemoval(u)
    override function onRemoval(unit u)
        target.exMoveType(foot)
        destr()
        
    override function destr()
        this.time = 0
        this.timePost = 0
        destroy this
    override static function engine()
        task = onAlways(frame) tk->
            for i in UnitWindWalk
                i.do()
init
    UnitWindWalk.engine()