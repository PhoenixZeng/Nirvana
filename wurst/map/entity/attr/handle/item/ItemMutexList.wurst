package ItemMutexList


/**
 * HashLists are used if you require quick contains operations
 * on a large list object. LinkedLists should be generally used, but are slow in this regard.
 * Removing elements from a HashList is slower than of LinkedLists.
*/
public class ItemMutexList<T>
	private static hashtable ht = InitHashtable()
	private static hashtable occurences = InitHashtable()

	private int size = 0

	/** Returns the number of occurences of an element in this list */
	function count(T elem) returns int
		return occurences.loadInt(this castTo int, elem castTo int)

	private function incrOccurences(T elem)
		occurences.saveInt(this castTo int, elem castTo int, count(elem) + 1)

	private function decrOccurences(T elem)
		occurences.saveInt(this castTo int, elem castTo int, count(elem) - 1)

	/** Add an element to the end of the list */
	function add(vararg T elems)
		for elem in elems
			ht.saveInt(this castTo int, size, elem castTo int)
			incrOccurences(elem)
			size++

	/** Set an existing element at the given position to a new value */
	function set(int index, T elem)
		decrOccurences(get(index))
		ht.saveInt(this castTo int, index, elem castTo int)
		incrOccurences(elem)

	/** Add all elements from elems to this list */
	function addAll(ItemMutexList<T> elems)
		for T elem in elems
			add(elem)

	/** Remove all elements from this list without destroying it */
	function clear()
		ht.flushChild(this castTo int)
		occurences.flushChild(this castTo int)
		size = 0

	/** Remove all elements from this list without destroying it */
	@deprecated("Use .clear() instead.") function removeAll()
		clear()

	/** Remove the element at the given index */
	function removeAt(int index)
		decrOccurences(ht.loadInt(this castTo int, index) castTo T)
		for i = index to size
			ht.saveInt(this castTo int, i, ht.loadInt(this castTo int, i + 1))
		size--

	/** Remove the first occurence of t from this list */
	function remove(T t)
		for i = 0 to size - 1
			if t castTo int == ht.loadInt(this castTo int, i)
				removeAt(i)
				break

	/** Get the size of the list */
	function size() returns int
		return size

	/** Get the size of the list */
	@deprecated("Use .size() instead.") function getSize() returns int
		return size

	/** Return whether the list is empty */
	function isEmpty() returns bool
		return size == 0

	/** Get the element at the given index from this list */
	function get(int index) returns T
		return ht.loadInt(this castTo int, index) castTo T

	/** Return whether the element exists in the list */
	@deprecated function contains(T elem) returns bool
		return ht.loadReal(this castTo int, elem castTo int) > 0

	/** Return whether the element exists in the list */
	function has(T elem) returns bool
		return count(elem) > 0

	/** Return whether the element exists in the list */
	function hasAt(int index) returns bool
		return index > -1 and index < size

	/** Get an iterator for this list */
	function iterator() returns HLItemMutexListIterator<T>
		return new HLItemMutexListIterator(this)

	/** Returns a shallow copy of this map */
	function copy() returns ItemMutexList<T>
		let list = new ItemMutexList<T>
		for elem in this
			list.add(elem)
		return list

	construct()

	/** Create a new list by copying all elements from another list into it */
	construct(thistype base)
		for elem in base
			add(elem)

	ondestroy
		clear()

public class HLItemMutexListIterator<Q>
	protected int i = 0
	protected ItemMutexList<Q> list

	construct(ItemMutexList<Q> list)
		this.list = list

	function hasNext() returns boolean
		return i < list.size()

	function remove()


	function next() returns Q
		i++
		return list.get(i - 1)

	function close()
		destroy this
