package Critical

import HashMap

public class CriticalList
    static let physics = new HashMap<unit,thistype>()
    static let magic = new HashMap<unit,thistype>()
    private var dummy = new CriticalEntity(null, null, null)
    protected var size = 0
    protected CriticalIterator staticItr

    static function getAttackFor(unit owner,bool create) returns thistype
        if physics.has(owner)
            return physics.get(owner)
        else if create
            let list = new CriticalList()
            physics.put(owner, list)
            return list
        else
            return null

    static function getSpellFor(unit owner,bool create) returns thistype
        if magic.has(owner)
            return physics.get(owner)
        else if create
            let list = new CriticalList()
            magic.put(owner, list)
            return list
        else
            return null

    function iterator() returns CriticalIterator
        return staticItr..reset()

    function has(Critical elem) returns boolean
        var entry = dummy.next
        while entry != dummy
            if entry.elem == elem
                return true
            entry = entry.next
        return false

    ondestroy
        if staticItr != null
            destroy staticItr
        var current = dummy.next
        while current != dummy
            current = current.next
            destroy current.prev
        destroy dummy

    construct()
        dummy.next = dummy
        dummy.prev = dummy
        staticItr = new CriticalIterator(this)

    function add(vararg Critical elems)
        for elem in elems
            let entry = new CriticalEntity(elem, dummy.prev, dummy)
            dummy.prev.next = entry
            dummy.prev = entry
            size++

    function push(Critical elem)
        add(elem)

    protected function removeEntry(CriticalEntity entry)
        entry.prev.next = entry.next
        entry.next.prev = entry.prev
        destroy entry
        size--

    function remove(Critical elem)
        var entry = dummy.next
        while entry != dummy
            if entry.elem == elem
                removeEntry(entry)
                return
            entry = entry.next

    function getDummy() returns CriticalEntity
        return dummy

public class CriticalIterator
    CriticalEntity	dummy
    CriticalEntity	current
    CriticalList parent

    construct(CriticalList parent)
        this.parent  = parent
        reset()

    function reset()
        this.dummy   = parent.getDummy()
        this.current = dummy

    function hasNext() returns boolean
        return current.next != dummy

    function next() returns Critical
        current = current.next
        return current.elem

    function close()

public class CriticalEntity
    Critical elem
    thistype prev
    thistype next
    
    construct(Critical elem,thistype prev,thistype next)
        this.elem = elem
        this.prev = prev
        this.next = next

public class Critical
    real chance
    real power
    construct(real chance,real power)
        this.chance = chance
        this.power = power

/*

    DamageHandler.on() (i,j,k,t) ->
        var rate = 1.
        CriticalList list = null
        if t == DmgType.ATTACK
            list = CriticalList.getAttackFor(i,false)
        else if t == DmgType.SPELL
            list = CriticalList.getSpellFor(i,false)
        if list != null
            for elem in list
                if elem.chance.random()
                    rate += (elem.power - 1)
                    Log.trace(i.getName()+"触发暴击+"+(elem.power - 1))
            Log.trace(i.getName()+"暴击结算:"+rate)
        return rate * k

public class AttackCriticalItemAffix implements ItemAffix
    Critical ctc
    construct(real chance,real power)
        this.ctc = new Critical(chance,power)
    override function onApply(unit u)
        let list = CriticalList.getAttackFor(u,true)
        if not list.has(ctc)
            list.push(ctc)
        else
            Log.trace("重复往单位添加同一个暴击词缀!已忽略此步骤.")
    override function onLose(unit u)
        let list = CriticalList.getAttackFor(u,false)
        if list != null
            list.remove(ctc)

    override function onAttack(unit i,unit j)
    override function onAttacked(unit i,unit j)
    override function onBBAttack(unit i,unit j)
    override function onKill(unit i,unit j)

public let attack_ctc_1 = new AttackCriticalItemAffix(60,5)
public let attack_ctc_2 = new AttackCriticalItemAffix(70,6)
public let attack_ctc_3 = new AttackCriticalItemAffix(90,2)

public class SpellCriticalItemAffix implements ItemAffix
    Critical ctc
    construct(real chance,real power)
        this.ctc = new Critical(chance,power)
    override function onApply(unit u)
        let list = CriticalList.getSpellFor(u,true)
        if not list.has(ctc)
            list.push(ctc)
        else
            Log.trace("重复往单位添加同一个暴击词缀!已忽略此步骤.")
    override function onLose(unit u)
        let list = CriticalList.getSpellFor(u,false)
        if list != null
            list.remove(ctc)

    override function onAttack(unit i,unit j)
    override function onAttacked(unit i,unit j)
    override function onBBAttack(unit i,unit j)
    override function onKill(unit i,unit j)

public let spell_ctc_1 = new SpellCriticalItemAffix(50,5)
public let spell_ctc_2 = new SpellCriticalItemAffix(65,6)
public let spell_ctc_3 = new SpellCriticalItemAffix(75,2)



*/